'From Squeak4.3 of 22 December 2011 [latest update: #11860] on 27 February 2013 at 9:44:39 pm'!Object subclass: #TraversalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-BinTree'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TraversalTest class	instanceVariableNames: ''!!TraversalTest class methodsFor: 'test method' stamp: 'KC 2/27/2013 21:36'!run	"Function for testing the BinTree and traversal classes.	A three node binary tree is created and traversed."| node1 node2 node3 traverse nextNode travStack tempStack tempEntry |Transcript clear.Transcript show: 'Test case: a binary tree with three nodes.'; cr.Transcript show: 'A is the root node, C is left of A, B is right of C.'; cr; cr.node1 := BinTree new: 'A'.node2 := BinTree new: 'C'.node3 := BinTree new: 'B'.node1 addLeftKid: node2.node2 addRightKid: node3.tempStack := Stack new.Transcript show: 'In-order:'; cr.traverse := InorderTraversal new: node1.nextNode := traverse first.[nextNode notNil]	whileTrue: [		Transcript show: 'Current node: '.		Transcript show: nextNode obj; cr.		Transcript show: 'Current stack: '.		travStack := traverse getStack.		[travStack isEmpty]			whileFalse: [				tempStack push: travStack pop.			].		[tempStack isEmpty]			whileFalse: [				tempEntry := tempStack pop.				Transcript show: tempEntry print.				travStack push: tempEntry.			].		Transcript cr.		nextNode := traverse next	].Transcript cr; cr; show: 'Pre-order.'; cr.traverse := PreorderTraversal new: node1.nextNode := traverse first.[nextNode notNil]	whileTrue: [		Transcript show: 'Current node: '.		Transcript show: nextNode obj; cr.		Transcript show: 'Current stack: '.		travStack := traverse getStack.		[travStack isEmpty]			whileFalse: [				tempStack push: travStack pop.			].		[tempStack isEmpty]			whileFalse: [				tempEntry := tempStack pop.				Transcript show: tempEntry print.				travStack push: tempEntry.			].		Transcript cr.		nextNode := traverse next	].Transcript cr; cr; show: 'Post-order.'; cr.traverse := PostorderTraversal new: node1.nextNode := traverse first.[nextNode notNil]	whileTrue: [		Transcript show: 'Current node: '.		Transcript show: nextNode obj; cr.		Transcript show: 'Current stack: '.		travStack := traverse getStack.		[travStack isEmpty]			whileFalse: [				tempStack push: travStack pop.			].		[tempStack isEmpty]			whileFalse: [				tempEntry := tempStack pop.				Transcript show: tempEntry print.				travStack push: tempEntry.			].		Transcript cr.		nextNode := traverse next	].! !