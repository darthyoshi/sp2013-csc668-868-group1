'From Squeak4.3 of 22 December 2011 [latest update: #11860] on 27 February 2013 at 9:44:45 pm'!Object subclass: #TraversalBigTreeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-BinTree'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TraversalBigTreeTest class	instanceVariableNames: ''!!TraversalBigTreeTest class methodsFor: 'test method' stamp: 'KC 2/27/2013 21:44'!run	"Function for testing the BinTree and traversal classes.	A three node binary tree is created and traversed."| node1 node2 node3 node4 node5 node6 node7 node8 node9 node10 node11 traverse nextNode travStack tempStack tempEntry |Transcript clear.Transcript show: 'Test case: a binary tree with eleven nodes.'; cr.Transcript show: 'See documentation for tree layout.'; cr; cr.node1 := BinTree new: 'A'.node2 := BinTree new: 'C'.node3 := BinTree new: 'B'.node4 := BinTree new: 'D'.node5 := BinTree new: 'E'.node6 := BinTree new: 'F'.node7 := BinTree new: 'G'.node8 := BinTree new: 'H'.node9 := BinTree new: 'I'.node10 := BinTree new: 'J'.node11 := BinTree new: 'K'.node1 addLeftKid: node2.node2 addRightKid: node3.
node2 addLeftKid: node4.
node4 addLeftKid: node5.
node5 addRightKid: node6.
node6 addLeftKid: node7.
node3 addLeftKid: node8.
node8 addRightKid: node9.
node9 addLeftKid: node10.
node10 addRightKid: node11.
tempStack := Stack new.Transcript show: 'In-order:'; cr.traverse := InorderTraversal new: node1.nextNode := traverse first.[nextNode notNil]	whileTrue: [		Transcript show: 'Current node: '.		Transcript show: nextNode obj; cr.		Transcript show: 'Current stack: '.		travStack := traverse getStack.		[travStack isEmpty]			whileFalse: [				tempStack push: travStack pop.			].		[tempStack isEmpty]			whileFalse: [				tempEntry := tempStack pop.				Transcript show: tempEntry print.				travStack push: tempEntry.			].		Transcript cr.		nextNode := traverse next	].Transcript cr; cr; show: 'Pre-order.'; cr.traverse := PreorderTraversal new: node1.nextNode := traverse first.[nextNode notNil]	whileTrue: [		Transcript show: 'Current node: '.		Transcript show: nextNode obj; cr.		Transcript show: 'Current stack: '.		travStack := traverse getStack.		[travStack isEmpty]			whileFalse: [				tempStack push: travStack pop.			].		[tempStack isEmpty]			whileFalse: [				tempEntry := tempStack pop.				Transcript show: tempEntry print.				travStack push: tempEntry.			].		Transcript cr.		nextNode := traverse next	].Transcript cr; cr; show: 'Post-order.'; cr.traverse := PostorderTraversal new: node1.nextNode := traverse first.[nextNode notNil]	whileTrue: [		Transcript show: 'Current node: '.		Transcript show: nextNode obj; cr.		Transcript show: 'Current stack: '.		travStack := traverse getStack.		[travStack isEmpty]			whileFalse: [				tempStack push: travStack pop.			].		[tempStack isEmpty]			whileFalse: [				tempEntry := tempStack pop.				Transcript show: tempEntry print.				travStack push: tempEntry.			].		Transcript cr.		nextNode := traverse next	].! !